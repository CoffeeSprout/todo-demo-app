---
# Main deployment configuration for the Todo Demo application
# This controls how the application pods are deployed and configured
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-demo-app
  namespace: default
  labels:
    app: todo-demo-app
spec:
  # Run a single replica for the starter branch
  replicas: 1
  selector:
    matchLabels:
      app: todo-demo-app
  template:
    metadata:
      labels:
        app: todo-demo-app
      annotations:
        # Prometheus scraping configuration - enables automatic metrics collection
        # These annotations are detected by Prometheus operator
        prometheus.io/scrape: "true"
        prometheus.io/path: "/q/metrics"
        prometheus.io/port: "8080"
        prometheus.io/scheme: "http"
        # Additional app info
        app.kubernetes.io/name: "todo-demo-app"
        app.kubernetes.io/part-of: "todo-demo-app"
    spec:
      # Pull container images from private container registry
      imagePullSecrets:
        - name: workshop-registry-secret
      # Pod-level security context - applies to all containers
      securityContext:
        runAsNonRoot: true  # Security best practice - never run as root
        seccompProfile:
          type: RuntimeDefault  # Use default seccomp profile to restrict syscalls
      containers:
        - name: todo-demo-app
          image: registry.hacknight043.coffeesprout.dev/todo-demo-app:latest  # This will be transformed by kustomize
          volumeMounts:
            - name: tmp-volume  # Ephemeral volume for temp files (required with readOnlyRootFilesystem)
              mountPath: /tmp
          imagePullPolicy: Always  # Always pull latest image for deployments
          ports:
            - containerPort: 8080  # Quarkus application port
          # Container-level security context - defense in depth security measures
          securityContext:
            allowPrivilegeEscalation: false  # Prevent privilege escalation
            readOnlyRootFilesystem: true     # Prevent filesystem modifications
            runAsNonRoot: true               # Never run as root
            runAsUser: 185                   # Run as non-privileged user (jboss)
            capabilities:
              drop:
              - ALL                          # Drop all Linux capabilities
          # Resource allocation for minimal starter branch
          # Reduced resources for simple in-memory implementation
          resources:
            limits:
              memory: "512Mi"  # Maximum memory allocation (512MB)
              cpu: "500m"      # Maximum CPU allocation (half core)
            requests:
              memory: "256Mi"  # Minimum guaranteed memory (256MB)
              cpu: "200m"      # Minimum guaranteed CPU (0.2 core)
          env:
            # Minimal environment variables for starter branch (in-memory storage)
            # Basic logging configuration
            - name: QUARKUS_LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: todo-demo-app-config
                  key: quarkus-log-level
            - name: QUARKUS_LOG_CONSOLE_JSON
              valueFrom:
                configMapKeyRef:
                  name: todo-demo-app-config
                  key: quarkus-log-console-json
            # JVM Memory Optimization for Kubernetes
            - name: JAVA_MAX_MEM_RATIO
              value: "75"
            - name: JAVA_INITIAL_MEM_RATIO
              value: "40"
            # Set Quarkus profile and HTTP configuration
            - name: QUARKUS_PROFILE
              value: "prod"
            - name: QUARKUS_HTTP_ROOT_PATH
              value: "/"
            - name: QUARKUS_HTTP_PORT
              value: "8080"
            - name: QUARKUS_HTTP_CORS
              value: "true"
            - name: QUARKUS_HTTP_CORS_ORIGINS
              value: "*"
            - name: JAVA_OPTS_APPEND
              value: "-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
            - name: JAVA_DIAGNOSTICS
              value: "true"
          # Health probes - critical for container lifecycle management
          # Readiness probe - determines if pod should receive traffic
          readinessProbe:
            httpGet:
              path: /q/health/ready  # Quarkus SmallRye Health readiness endpoint
              port: 8080
            initialDelaySeconds: 20  # Wait 20s before first probe
            periodSeconds: 10        # Check every 10s
            timeoutSeconds: 3        # Probe timeout
            successThreshold: 1      # Must succeed once to be ready
            failureThreshold: 3      # Allow 3 failures before marking unready
          
          # Liveness probe - determines if pod should be restarted
          livenessProbe:
            httpGet:
              path: /q/health/live    # Quarkus SmallRye Health liveness endpoint
              port: 8080
            initialDelaySeconds: 60  # Longer delay to allow full startup
            periodSeconds: 30        # Less frequent checks for liveness
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3      # Restart after 3 consecutive failures
          
          # Startup probe - gives app time to startup before liveness kicks in
          startupProbe:
            httpGet:
              path: /q/health/live    # Same endpoint as liveness
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 5         # More frequent during startup
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 30     # Allow up to 30 failures (150s) during startup
      volumes:
        - name: tmp-volume
          emptyDir: {}
